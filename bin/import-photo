#!/usr/bin/env ruby
$:.push File.expand_path("../../lib", __FILE__)
require "fileutils"
require "rmagick"
require "optparse"
require "active_support/core_ext/object/blank"
require "jekyller/picture"

op = OptionParser.new

output_dir = nil
width = nil
height = nil

help_flag = false
move_flag = false
rename_flag = false
overwrite_flag = false

op.on("--move") { move_flag = true }
op.on("--help") { help_flag = true }
op.on("--rename") { rename_flag = true }
op.on("--overwrite") { overwrite_flag = true }
op.on("--size SIZE", Integer) { |i| width = height = i }
op.on("--width WIDTH", Integer) { |i| width = i }
op.on("--height HEIGHT", Integer) { |i| height = i }

op.parse!(ARGV)

if help_flag
  puts <<-EOT
Usage: import-photo [--size SIZE]
                    [--width WIDTH]
                    [--height HEIGHT]
                    [--delete]
                    [--rename]
                    <input_dir:/Volumes/Untitled/DCIM/101MSDCF or ~/Dropbox/カメラアップロード>
                    <output_dir:~/Dropbox/photo.backup>
  EOT
  exit 0
end

input_dir = ARGV.shift
output_dir = ARGV.shift || "#{ENV["HOME"]}/Dropbox/photo.import"

if input_dir.blank?
  external_dir = "/Users/haracane/DCIM/101MSDCF"
  if Dir.exists?(external_dir)
    input_dir = external_dir
  else
    input_dir = "#{ENV["HOME"]}/Dropbox/カメラアップロード"
  end
end

image_filepaths = Dir::glob("#{input_dir}/*").select { |filepath| /\.jpg$/i =~ filepath }

if image_filepaths.empty?
  puts "No images in #{input_dir}"
  exit 0
end

file_mtimes = image_filepaths.map { |filepath| File::stat(filepath).mtime }

latest_modified_at = file_mtimes.max

indexes = {}

image_filepaths.each do |filepath|
  input_filename = filepath.split(/\//).last
  picture = Jekyller::Picture.new(filepath)
  stat = File::stat(filepath)
  modified_at = [
    picture.exif[:createdate],
    picture.exif[:datetimeoriginal],
    picture.exif[:modifydate],
    stat.mtime
  ].compact.min

  output_filepath = nil

  if rename_flag #&& /^DSC[0-9]+\.JPG$/ =~ input_filename
    output_filebody = modified_at.strftime("%Y%m%d")
    indexes[output_filebody] ||= 0
    indexes[output_filebody] += 1

    loop do
      output_filename = "#{output_filebody}-#{indexes[output_filebody]}.jpg"
      output_filepath = "#{output_dir}/#{output_filename}"
      break if overwrite_flag || !File.exists?(output_filepath)
      indexes[output_filebody] += 1
    end
  else
    output_filename = input_filename
    output_filepath = "#{output_dir}/#{output_filename}"
  end

  if width || height
    width ||= 8192
    height ||= 8192
    image = Magick::Image.read(filepath).first
    if output_dir
      resized_image = image.resize_to_fit(width, height)
      resized_image.write(output_filepath)
      puts "Created #{output_filepath}"
    end
  else
    if move_flag
      `mv #{filepath} #{output_filepath}`
      next if $? != 0
      puts "moved #{filepath} to #{output_filepath}"
    else
      `cp #{filepath} #{output_filepath}`
      next if $? != 0
      puts "copied #{filepath} to #{output_filepath}"
    end
  end
end
